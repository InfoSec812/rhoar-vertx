gjlngdt
#!/usr/bin/groovy

////
// This pipeline requires the following plugins:
// Kubernetes Plugin 0.10
////

String ocpApiServer = env.OCP_API_SERVER ? "${env.OCP_API_SERVER}" : "https://openshift.default.svc.cluster.local"

node('master') {

    env.NAMESPACE = readFile('/var/run/secrets/kubernetes.io/serviceaccount/namespace').trim()
    env.TOKEN = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()
    env.OC_CMD = "oc --token=${env.TOKEN} --server=${ocpApiServer} --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt --namespace=${env.NAMESPACE}"

    env.APP_NAME = "${env.JOB_NAME}".replaceAll(/-?pipeline-?/, '').replaceAll(/-?${env.NAMESPACE}-?/, '')
    def projectBase = "${env.NAMESPACE}".replaceAll(/-dev/, '')
    env.STAGE1 = "${projectBase}-dev"
    env.STAGE2 = "${projectBase}-demo"

}

node('jenkins-slave-npm') {
    def mvnCmd = 'mvn'
    String pomFileLocation = "pom.xml"

    stage('SCM Checkout') {
        checkout scm
    }

    dir(env.BUILD_CONTEXT_DIR) {
        stage('Build') {
            withSonarQubeEnv {
                sh 'mvn clean '
            }
        }

        stage('Unit Test') {

            sh "${mvnCmd} test"

        }


        stage('Build Image') {

            sh "${env.OC_CMD} start-build ${env.APP_NAME} --from-dir=src/main/frontend/dist/ --wait=true --follow=true"
        }
    }

    stage("Verify Deployment to ${env.STAGE1}") {

        openshiftVerifyDeployment(deploymentConfig: "${env.APP_NAME}", namespace: "${STAGE1}", verifyReplicaCount: true)

        input "Promote Application to Stage?"
    }

    stage("Promote To ${env.STAGE2}") {
        sh """
    ${env.OC_CMD} tag ${env.STAGE1}/${env.APP_NAME}:latest ${env.STAGE2}/${env.APP_NAME}:latest
    """
    }

    stage("Verify Deployment to ${env.STAGE2}") {

        openshiftVerifyDeployment(deploymentConfig: "${env.APP_NAME}", namespace: "${STAGE2}", verifyReplicaCount: true)

        input "Promote Application to Prod?"
    }

    stage("Promote To ${env.STAGE3}") {
        sh """
    ${env.OC_CMD} tag ${env.STAGE2}/${env.APP_NAME}:latest ${env.STAGE3}/${env.APP_NAME}:latest
    """
    }
}

println "Application ${env.APP_NAME} is now in Demo!"