apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: '2018-05-07T14:57:56Z'
  name: sonarqube
  namespace: myproject
  resourceVersion: '3495'
  selfLink: /apis/template.openshift.io/v1/namespaces/myproject/templates/sonarqube
  uid: 06817ac5-5207-11e8-abc6-c85b76cd0ed1
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        build: sonarqube
      name: sonarqube
    spec:
      tags:
        - annotations:
            openshift.io/imported-from: docker.io/library/sonarqube
          from:
            kind: DockerImage
            name: docker.io/library/sonarqube
          name: latest
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        build: sonarqube
      name: sonarqube-with-plugins
    spec: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: sonarqube
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: '${VOLUME_CAPACITY}'
  - apiVersion: v1
    kind: Secret
    metadata:
      name: sonar-database-secret
    stringData:
      database-password: '${JDBC_PASSWORD}'
      database-user: '${JDBC_USER}'
  - apiVersion: v1
    kind: Route
    metadata:
      creationTimestamp: null
      labels:
        appName: sonarqube
      name: sonarqube
    spec:
      port:
        targetPort: 9000-tcp
      to:
        kind: Service
        name: sonarqube
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: sonarqube
        appName: sonarqube
      name: sonarqube
    spec:
      ports:
        - name: 9000-tcp
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        app: sonarqube
        deploymentconfig: sonarqube
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      creationTimestamp: null
      labels:
        app: sonarqube
        appName: sonarqube
        name: sonarqube
        type: image
      name: sonarqube
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'sonarqube-with-plugins:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: '${SOURCE_REPOSITORY_CONTEXT_DIR}'
        git:
          ref: '${SOURCE_REPOSITORY_REF}'
          uri: '${SOURCE_REPOSITORY_URL}'
        type: Git
      strategy:
        dockerStrategy:
          env:
            - name: SONAR_PLUGINS_LIST
              value: '${PLUGINS_LIST}'
          from:
            kind: ImageStreamTag
            name: 'sonarqube:latest'
          noCache: false
        type: Docker
      triggers:
        - type: ConfigChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: sonarqube
        appName: sonarqube
        name: sonarqube
      name: sonarqube
    spec:
      replicas: 1
      selector:
        app: sonarqube
        deploymentconfig: sonarqube
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: sonarqube
            deploymentconfig: sonarqube
        spec:
          containers:
            - env:
                - name: SONAR_PLUGIN_LIST
                  value: '${SONAR_PLUGIN_LIST}'
                - name: SONARQUBE_WEB_JVM_OPTS
                  value: '${WEB_JVM_OPTS}'
                - name: JDBC_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: sonar-database-secret
                - name: JDBC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: sonar-database-secret
                - name: JDBC_URL
                  value: '${JDBC_URL}'
                - name: LDAP_BINDDN
                  value: '${LDAP_BINDDN}'
                - name: LDAP_BINDPASSWD
                  value: '${LDAP_BINDPASSWD}'
                - name: LDAP_URL
                  value: '${LDAP_URL}'
                - name: LDAP_REALM
                  value: '${LDAP_REALM}'
                - name: LDAP_CONTEXTFACTORY
                  value: '${LDAP_CONTEXT_FACTORY}'
                - name: LDAP_STARTTLS
                  value: '${LDAP_STARTTLS}'
                - name: LDAP_AUTHENTICATION
                  value: '${LDAP_AUTHENTICATION_METHOD}'
                - name: LDAP_USER_BASEDN
                  value: '${LDAP_USER_BASEDN}'
                - name: LDAP_USER_REQUEST
                  value: '${LDAP_USER_REQUEST}'
                - name: LDAP_USER_REAL_NAME_ATTR
                  value: '${LDAP_USER_REAL_NAME_ATTR}'
                - name: LDAP_USER_EMAIL_ATTR
                  value: '${LDAP_USER_EMAIL_ATTR}'
                - name: LDAP_GROUP_BASEDN
                  value: '${LDAP_GROUP_BASEDN}'
                - name: LDAP_GROUP_REQUEST
                  value: '${LDAP_GROUP_REQUEST}'
                - name: LDAP_GROUP_ID_ATTR
                  value: '${LDAP_GROUP_ID_ATTR}'
                - name: FORCE_AUTHENTICATION
                  value: '${FORCE_AUTHENTICATION}'
                - name: CA_CERT_URL
                  value: '${CA_CERT_URL}'
                - name: EXTRA_JVM_ARGS
                  value: '${EXTRA_JVM_ARGS}'
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 9000
                  scheme: HTTP
                initialDelaySeconds: 45
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
              name: sonarqube
              ports:
                - containerPort: 9000
                  protocol: TCP
              resources:
                limits:
                  cpu: '${CPU_LIMIT}'
                  memory: '${MEMORY_LIMIT}'
                requests:
                  cpu: 500m
                  memory: 1Gi
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /opt/sonarqube/data
                  name: sonarqube
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: sonarqube
              persistentVolumeClaim:
                claimName: sonarqube
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - sonarqube
            from:
              kind: ImageStreamTag
              name: 'sonarqube-with-plugins:latest'
          type: ImageChange
    status: {}
parameters:
  - description: The URL of the repository with the SonarQube container image build.
    displayName: Git Repository URL for SonarQube Build
    name: SOURCE_REPOSITORY_URL
    required: true
    value: 'https://github.com/rht-labs/openshift-sonarqube'
  - description: >-
      Set this to a branch name, tag or other ref of git repository if you are
      not using the default (master) branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: >-
      The directory in the source repository where the SonarQube docker build
      is.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_CONTEXT_DIR
  - description: User that will be used for accessing the database.
    displayName: Database Connection Username
    name: JDBC_USER
    required: true
  - description: Password for the database connection user.
    displayName: Database Connection Password
    name: JDBC_PASSWORD
    required: true
  - description: >-
      Volume space available for sonar local data like plugins. values such as
      512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 5Gi
  - description: Number of virtual CPUs to allocate for SonarQube
    displayName: SonarQube CPU limit
    name: CPU_LIMIT
    required: true
    value: '2'
  - description: >-
      The maximum amount of memory that the SonarQube application is allowed to
      use (Min is 512Mi, recommended is 2Gi)
    displayName: SonarQube Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 2Gi
  - description: >-
      Space separated list of plugins (See:
      https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix)
    displayName: SonarQube Plugins List
    name: PLUGINS_LIST
    value: findbugs pmd ldap buildbreaker github gitlab
  - description: >-
      Extra JVM startup properties for SonarQube (in the form of
      "-Dsonar.someProperty=someValue")
    displayName: Extra SonarQube startup properties
    name: WEB_JVM_OPTS
  - description: >-
      Password used for SonarQube database authentication (leave blank to use
      ephemeral database)
    displayName: JDBC URL for connecting to the SonarQube database
    name: JDBC_URL
  - description: Bind DN for LDAP authentication (leave blank for local authentication)
    displayName: LDAP bind Distinguished Name
    name: LDAP_BINDDN
  - description: >-
      Bind password for LDAP authentication (leave blank for local
      authentication)
    displayName: LDAP bind password
    name: LDAP_BINDPASSWD
  - description: LDAP URL for authentication (leave blank for local authentication)
    displayName: LDAP server URL
    name: LDAP_URL
  - description: >-
      Leave blank if you are not using LDAP for authentication. Otherwise, set
      this to 'LDAP'
    displayName: Security Realm
    name: LDAP_REALM
  - description: >-
      The context factory is a Java class which is used for creating bindings to
      LDAP servers. The default value should work with most LDAP servers.
    displayName: JNDI ContextFactory to be used
    name: LDAP_CONTEXT_FACTORY
    value: com.sun.jndi.ldap.LdapCtxFactory
  - description: Tells the LDAP plugin to use TLS for connections to the LDAP server
    displayName: Enable StartTLS
    name: LDAP_STARTTLS
    value: 'false'
  - description: 'Typical values include: simple | CRAM-MD5 | DIGEST-MD5 | GSSAPI'
    displayName: LDAP authentication method
    name: LDAP_AUTHENTICATION_METHOD
    value: simple
  - description: LDAP BaseDN under which to search for user objects
    displayName: LDAP user base Distinguished Name
    name: LDAP_USER_BASEDN
  - description: >-
      A filter definition which will cause the LDAP server to only return user
      objects
    displayName: LDAP user object filter
    name: LDAP_USER_REQUEST
    value: '(&(objectClass=inetOrgPerson)(uid={login}))'
  - description: >-
      LDAP attribute on the user object which will be used to get the user's
      full name
    displayName: LDAP user's real name atrribute
    name: LDAP_USER_REAL_NAME_ATTR
    value: cn
  - description: LDAP attribute which holds the user's e-mail address
    displayName: LDAP user e-mail attribute
    name: LDAP_USER_EMAIL_ATTR
    value: mail
  - description: LDAP BaseDN under which to search for group objects
    displayName: LDAP group base Distinguished Name
    name: LDAP_GROUP_BASEDN
  - description: >-
      A filter definition which will cause the LDAP server to only return group
      objects
    displayName: LDAP group object filter
    name: LDAP_GROUP_REQUEST
    value: '(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))'
  - description: LDAP attribute from the group object which holds the group's ID
    displayName: LDAP group ID attribute
    name: LDAP_GROUP_ID_ATTR
    value: cn
  - description: >-
      Generally used so that SonarQube can communicate via SSL/TLS to an LDAP
      server for authentication (IdM).
    displayName: CA Certificate URL
    name: CA_CERT_URL
  - description: Pass in arguments like '-Djavax.net.debug=ssl' to debug issues.
    displayName: Extra arguments to be passed to the JVM on start
    name: EXTRA_JVM_ARGS
  - description: Require authentication for all requests to sonarqube
    displayName: Require Authentication
    name: FORCE_AUTHENTICATION
    value: 'true'